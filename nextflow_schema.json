{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "https://raw.githubusercontent.com/CCBR/CHAMPAGNE/main/nextflow_schema.json",
    "title": "CCBR/CHAMPAGNE pipeline parameters",
    "description": "CHromAtin iMmuno PrecipitAtion sequencinG aNalysis pipEline",
    "type": "object",
    "$defs": {
        "input_output_options": {
            "title": "Input/output options",
            "type": "object",
            "fa_icon": "fas fa-terminal",
            "description": "The most commonly used pipeline options",
            "required": ["input", "genome"],
            "properties": {
                "input": {
                    "type": "string",
                    "format": "file-path",
                    "exists": true,
                    "mimetype": "text/csv",
                    "pattern": "^\\S+\\.csv$",
                    "description": "Path to comma-separated file containing information about the samples in the experiment.",
                    "help_text": "You will need to create a design file with information about the samples in your experiment before running the pipeline. Use this parameter to specify its location. It has to be a comma-separated file with 3 columns, and a header row.",
                    "fa_icon": "fas fa-file-csv"
                },
                "contrasts": {
                    "type": "string",
                    "fa_icon": "far fa-file",
                    "description": "Optional contrasts specification for differential analysis"
                },
                "genome": {
                    "type": "string",
                    "description": "Reference genome (e.g. hg38, mm10). This can be a genome in conf/genomes.config, or see 'Custom genome options' to build a custom reference from a fasta & gtf file."
                },
                "outputDir": {
                    "type": "string",
                    "default": "${launchDir}/results",
                    "fa_icon": "fas fa-folder",
                    "hidden": true
                },
                "tracedir": {
                    "type": "string",
                    "default": "${outputDir}/pipeline_info",
                    "fa_icon": "fas fa-folder",
                    "hidden": true
                },
                "publish_dir_mode": {
                    "type": "string",
                    "default": "link",
                    "enum": ["link", "copy", "move", "copyNoFollow", "rellink", "symlink"],
                    "description": "How to publish files to the results directory. This parameter sets Nextflow's workflow.output.mode configuration option."
                }
            }
        },
        "custom_genome_options": {
            "title": "Custom genome options",
            "type": "object",
            "description": "Use these to build a custom reference genome not already listed in conf/genomes.config. For an example, see conf/test.config.",
            "default": "",
            "properties": {
                "genome_fasta": {
                    "type": "string",
                    "fa_icon": "fas fa-file",
                    "description": "Genome fasta file"
                },
                "genes_gtf": {
                    "type": "string",
                    "fa_icon": "fas fa-file",
                    "description": "Genome gtf file"
                },
                "blacklist": {
                    "type": "string",
                    "fa_icon": "fas fa-file",
                    "description": "Custom blacklisted sequences as a fasta file or bed file. These will be filtered out of the trimmed reads before aligning to the reference genome."
                },
                "read_length": {
                    "type": "integer",
                    "description": "Read length used for counting unique kmers and computing the effective genome size."
                },
                "rename_contigs": {
                    "type": "string",
                    "fa_icon": "fas fa-file",
                    "description": "File with map to translate chromosome names (see assets/R64-1-1_ensembl2UCSC.txt as an example)"
                }
            }
        },
        "general_parameters": {
            "title": "General parameters",
            "type": "object",
            "description": "",
            "default": "",
            "properties": {
                "max_memory": {
                    "type": "string",
                    "default": "224 GB"
                },
                "max_cpus": {
                    "type": "integer",
                    "default": 32
                },
                "max_time": {
                    "type": "string",
                    "default": "72 h"
                },
                "align_min_quality": {
                    "type": "integer",
                    "default": 6
                },
                "min_fragment_length": {
                    "type": "integer",
                    "default": 200
                }
            }
        },
        "spike_in_options": {
            "title": "Spike-in options",
            "type": "object",
            "description": "Options for experiments that use a spike-in genome",
            "default": "",
            "properties": {
                "spike_genome": {
                    "type": "string",
                    "description": "Optional spike-in genome (e.g. dmelr6.32, ecoli_k12). If null, spike-in normalization will not be performed."
                },
                "spike_norm_method": {
                    "type": "string",
                    "default": "delorenzi",
                    "enum": ["delorenzi", "guenther"],
                    "description": "Method to compute scaling factors for spike-in normalization. \"guenther\" uses a simple fraction of the reads aligning to the spike-in genome as described in <https://doi.org/10.1016/j.celrep.2014.10.018>. \"delorenzi\" uses deepTools multiBamSummary with --scalingFactors, which is similar to the method described in <https://doi.org/10.1101/gr.168260.113>."
                },
                "spike_deeptools_bin_size": {
                    "type": "integer",
                    "default": 5000,
                    "description": "When spike_norm_method is delorenzi, this sets --binSize in deepTools multiBamSummary"
                },
                "spike_deeptools_min_map_quality": {
                    "type": "integer",
                    "default": 30,
                    "description": "When spike_norm_method is delorenzi, this sets --minMappingQuality in deepTools multiBamSummary"
                }
            }
        },
        "qc_options": {
            "title": "QC options",
            "type": "object",
            "description": "",
            "default": "",
            "properties": {
                "deeptools_bin_size": {
                    "type": "integer",
                    "default": 25
                },
                "deeptools_smooth_length": {
                    "type": "integer",
                    "default": 75
                },
                "deeptools_normalize_using": {
                    "type": "string",
                    "default": "RPGC",
                    "description": "If using a spike-in genome, recommend setting this to \"None\""
                },
                "deeptools_excluded_chroms": {
                    "type": "string",
                    "default": "chrM chrX chrY"
                },
                "multiqc_config": {
                    "type": "string",
                    "format": "file-path",
                    "fa_icon": "fas fa-file",
                    "default": "assets/multiqc_config.yaml"
                },
                "multiqc_logo": {
                    "type": "string",
                    "format": "file-path",
                    "fa_icon": "fas fa-file",
                    "default": "assets/ccbr_logo.png"
                }
            }
        },
        "peak_callers": {
            "title": "Peak callers",
            "type": "object",
            "description": "",
            "default": "",
            "properties": {
                "macs_narrow_q": {
                    "type": "number",
                    "default": 0.01
                },
                "macs_broad_q": {
                    "type": "number",
                    "default": 0.01
                },
                "macs_broad_cutoff": {
                    "type": "number",
                    "default": 0.01
                },
                "gem_read_dists": {
                    "type": "string",
                    "format": "file-path",
                    "fa_icon": "fas fa-file",
                    "default": "assets/gem/Read_Distribution_default.txt"
                },
                "gem_fold": {
                    "type": "integer",
                    "default": 3
                },
                "gem_k_min": {
                    "type": "integer",
                    "default": 6
                },
                "gem_k_max": {
                    "type": "integer",
                    "default": 13
                },
                "sicer_species": {
                    "type": "string"
                }
            }
        },
        "motifs": {
            "title": "motifs",
            "type": "object",
            "description": "",
            "default": "",
            "properties": {
                "homer_de_novo": {
                    "type": "boolean",
                    "default": true
                },
                "homer_jaspar_db": {
                    "type": "string",
                    "format": "file-path",
                    "fa_icon": "fas fa-file",
                    "default": "assets/JASPAR2022_CORE_vertebrates_non-redundant_pfms_jaspar.txt"
                }
            }
        },
        "run_control": {
            "title": "run control",
            "type": "object",
            "description": "Toggle various steps of the pipeline on/off",
            "default": "",
            "properties": {
                "run_qc": {
                    "type": "boolean",
                    "default": true
                },
                "run_deeptools": {
                    "type": "boolean",
                    "default": true
                },
                "run_normalize_input": {
                    "type": "boolean",
                    "default": true
                },
                "run_call_peaks": {
                    "type": "boolean",
                    "default": true
                },
                "run_gem": {
                    "type": "boolean",
                    "default": true
                },
                "run_sicer": {
                    "type": "boolean",
                    "default": true
                },
                "run_macs_broad": {
                    "type": "boolean",
                    "default": true
                },
                "run_macs_narrow": {
                    "type": "boolean",
                    "default": true
                },
                "run_normalize_peaks": {
                    "type": "boolean"
                },
                "run_chipseeker": {
                    "type": "boolean"
                },
                "run_homer": {
                    "type": "boolean",
                    "default": true
                },
                "run_meme": {
                    "type": "boolean",
                    "default": true
                },
                "run_consensus_union": {
                    "type": "boolean",
                    "default": true
                },
                "run_consensus_corces": {
                    "type": "boolean",
                    "default": true
                }
            }
        },
        "platform_options": {
            "title": "Platform options",
            "type": "object",
            "description": "Options for the platform or HPC on which the pipeline is run. These are set by platform-specific profiles, e.g. conf/biowulf.config. If you are running the pipeline on biowulf, these will be set by CHAMPAGNE automatically.",
            "default": "",
            "properties": {
                "index_dir": {
                    "type": "string",
                    "fa_icon": "fas fa-folder-open",
                    "description": "Absolute path to directory containing pre-built reference genomes."
                },
                "fastq_screen_conf": {
                    "type": "string",
                    "description": "Path to the config file for fastq screen. See assets/fastq_screen_biowulf.conf as an example."
                },
                "fastq_screen_db_dir": {
                    "type": "string",
                    "fa_icon": "fas fa-folder-open",
                    "description": "Path to the directory containing fastq screen databases."
                }
            }
        },
        "containers": {
            "title": "containers",
            "type": "object",
            "description": "",
            "default": "",
            "fa_icon": "fab fa-docker",
            "properties": {
                "containers_base": {
                    "type": "string",
                    "default": "nciccbr/ccbr_ubuntu_base_20.04:v6.1"
                },
                "containers_deeptools": {
                    "type": "string",
                    "default": "nciccbr/ccbr_deeptools_3.5.3:v1"
                },
                "containers_fastqc": {
                    "type": "string",
                    "default": "nciccbr/ccrgb_qctools:v4.0"
                },
                "containers_fastq_screen": {
                    "type": "string",
                    "default": "nciccbr/ccbr_fastq_screen_0.14.1:v1.0"
                },
                "containers_frip": {
                    "type": "string",
                    "default": "nciccbr/ccbr_frip:v1"
                },
                "containers_gem": {
                    "type": "string",
                    "default": "nciccbr/ccbr_gem_3.4:v1"
                },
                "containers_macs2": {
                    "type": "string",
                    "default": "nciccbr/ccbr_macs2_2.2.9.1:v1"
                },
                "containers_multiqc": {
                    "type": "string",
                    "default": "nciccbr/ccbr_multiqc_1.15:v1"
                },
                "containers_ngsqc": {
                    "type": "string",
                    "default": "nciccbr/ccbr_ngsqc_0.31:v1"
                },
                "containers_phantom_peaks": {
                    "type": "string",
                    "default": "quay.io/biocontainers/phantompeakqualtools:1.2.2--hdfd78af_1"
                },
                "containers_picard": {
                    "type": "string",
                    "default": "nciccbr/ccbr_picard_2.27.5:v1"
                },
                "containers_preseq": {
                    "type": "string",
                    "default": "nciccbr/ccbr_preseq_v2.0:v1"
                },
                "containers_r": {
                    "type": "string",
                    "default": "nciccbr/ccbr_r_4.3.0:v1"
                },
                "containers_sicer": {
                    "type": "string",
                    "default": "nciccbr/ccbr_sicer2_1.0.3:v1"
                }
            }
        }
    },
    "allOf": [
        {
            "$ref": "#/$defs/input_output_options"
        },
        {
            "$ref": "#/$defs/custom_genome_options"
        },
        {
            "$ref": "#/$defs/general_parameters"
        },
        {
            "$ref": "#/$defs/spike_in_options"
        },
        {
            "$ref": "#/$defs/qc_options"
        },
        {
            "$ref": "#/$defs/peak_callers"
        },
        {
            "$ref": "#/$defs/motifs"
        },
        {
            "$ref": "#/$defs/run_control"
        },
        { "$ref": "#/$defs/platform_options" },
        {
            "$ref": "#/$defs/containers"
        }
    ],
    "properties": {
        "diffbind_report": {
            "type": "string",
            "format": "file-path",
            "default": "assets/diffbind_report.Rmd",
            "fa_icon": "fas fa-file",
            "hidden": true
        }
    }
}
