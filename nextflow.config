nextflow.enable.dsl = 2

params {
    max_cpus = 8 // for interactive node.
    filePublishMode = "copy"
    cutadapt {
        adapters = '/opt2/TruSeq_and_nextera_adapters.consolidated.fa'
        minlen = 20
        leadingquality = 10
        trailingquality = 10
    }
    fastq_screen {
        conf = 'conf/fastq_screen.conf'
        db_dir = '/data/CCBR_Pipeliner/db/PipeDB/lib/fastq_screen_db/'
    }
    align {
        // TODO: blacklist depends on the genome
        index_dir = '/data/CCBR_Pipeliner/db/PipeDB/Indices/hg38_basic/indexes/'
        genome = 'hg38'
        blacklist = 'hg38.blacklist'
        min_quality = 5
    }
}

def timestamp = new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')
dag {
    enabled = true
    overwrite = true
    file = "assets/dag.png"
}

profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    docker {
        docker.enabled = true
        // Avoid this error:
        //   WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
        // Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351
        // once this is established and works well, nextflow might implement this behavior as new default.
        docker.runOptions = '-u \$(id -u):\$(id -g)'
    }
    singularity {
        singularity.enabled = true
        singularity.autoMounts = true
        singularity.cacheDir = "/data/$USER/.singularity" // TODO this may be a different default on other (non biowulf) platforms
    }
    test {
        includeConfig "conf/test.config"
    }
}

process {

    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 7.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }

    withName: 'TRIM_SE|FASTQC' {
        cpus = 4
    }
    withName: 'TRIM_.*' {
        container = 'nciccbr/ncigb_cutadapt_v1.18:latest'
    }
    withName: 'FASTQC' {
        container = 'nciccbr/ccrgb_qctools:latest'
    }
    withName: 'FASTQ_SCREEN' {
        container = 'nciccbr/ccbr_fastq_screen_0.14.1'
        containerOptions = "--bind ${params.fastq_screen.db_dir}"
        cpus = 8
    }
    withName: 'ALIGN.*|INDEX_BAM' {
        container = 'nciccbr/ccbr_ubuntu_base_20.04:latest'
        cpus = 8
    }
    withName: 'PRESEQ' {
        container = 'nciccbr/ccbr_preseq:v0.0.1'
        cpus = 1
    }
}

manifest {
    name = "CCBR/CHAMPAGNE"
    author = "CCR Collaborative Bioinformatics Resource"
    homePage = "https://github.com/CCBR/CHAMPAGNE"
    description = "CHromAtin iMmuno PrecipitAtion sequencinG aNalysis pipEline"
    mainScript = "main.nf"
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
