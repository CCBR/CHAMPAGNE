nextflow.enable.dsl = 2

params {
    input = null
    seq_center = null
    enable_conda = false
    publish_dir_mode = "copy"
    cutadapt {
        adapters = '/opt2/TruSeq_and_nextera_adapters.consolidated.fa'
        minlen = 20
        leadingquality = 10
        trailingquality = 10
    }
    fastq_screen {
        conf = 'conf/fastq_screen.conf'
        db_dir = '/data/CCBR_Pipeliner/db/PipeDB/lib/fastq_screen_db/'
    }
    align {
        index_dir = '/data/CCBR_Pipeliner/db/PipeDB/Indices/hg38_basic/indexes/'
        genome = 'hg38'
        blacklist = 'hg38.blacklist'        // TODO: blacklist depends on the genome. set a genome param.
        min_quality = 6                     // to get a min quality of 5, set this to 6
        effective_genome_size = 2700000000  // source: https://github.com/CCBR/Pipeliner/blob/86c6ccaa3d58381a0ffd696bbf9c047e4f991f9e/hg38.json#L349
        chrom_sizes = 'hg38.fa.sizes'       // source: https://github.com/CCBR/Pipeliner/blob/86c6ccaa3d58381a0ffd696bbf9c047e4f991f9e/hg38.json#L359
    }
    deeptools {
        bin_size = 25 // TODO don't do nested params structure, it breaks on overriding single parameters in a nested block.
        smooth_length = 75
        normalize_using = "RPGC"
        excluded_chroms = "chrM chrX chrY"
    }
    gene_info = '/data/CCBR_Pipeliner/db/PipeDB/Indices/hg38_basic/geneinfo.bed'
}

def timestamp = new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')
dag {
    enabled = true
    overwrite = true
    file = "assets/dag.png"
}

profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    docker {
        docker.enabled = true
        // Avoid this error:
        //   WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
        // Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351
        // once this is established and works well, nextflow might implement this behavior as new default.
        docker.runOptions = '-u \$(id -u):\$(id -g)'
    }
    singularity {
        singularity.enabled = true
        singularity.autoMounts = true
        singularity.cacheDir = "/data/$USER/.singularity" // TODO this may be a different default on other (non biowulf) platforms
    }
    test {
        includeConfig "conf/test.config"
    }
}

process {

    publishDir = [
        path: { task.label ? "${params.outdir}/${task.label.join('/')}/${task.process.tokenize(':')[-1].toLowerCase()}" : "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 7.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }
    errorStrategy = 'finish'

    withName: 'INPUT_CHECK:SAMPLESHEET_CHECK' {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'TRIM.*' {
        container = 'nciccbr/ncigb_cutadapt_v1.18:latest'
        cpus = 4
    }
    withName: 'FASTQC' {
        container = 'nciccbr/ccrgb_qctools:latest'
        cpus = 4
    }
    withName: 'FASTQ_SCREEN' {
        container = 'nciccbr/ccbr_fastq_screen_0.14.1'
        containerOptions = "--bind ${params.fastq_screen.db_dir}"
        cpus = 8
    }
    withName: 'ALIGN.*|INDEX_BAM' {
        container = 'nciccbr/ccbr_ubuntu_base_20.04:latest'
        cpus = 8
    }
    withName: 'PRESEQ' {
        container = 'nciccbr/ccbr_preseq_v2.0:v1'
        cpus = 8
    }
    withName: 'PHANTOM_PEAKS' {
        container = 'quay.io/biocontainers/phantompeakqualtools:1.2.2--hdfd78af_1'
        cpus = 1
    }
    withName: 'DEDUPLICATE' {
        container = 'nciccbr/ccbr_macs2_2.2.9.1:v1'
        cpus = 4
    }
    withName: 'NGSQC_GEN' {
        container = 'nciccbr/ccbr_ngsqc_0.31:v1'
        cpus = 1
    }
    withLabel: 'deeptools' {
        container = 'nciccbr/ccbr_deeptools_3.5.2:v1'
    }
    withName: 'BAM_COVERAGE|FINGERPRINT|COMPUTE_.*|INPUT_NORM' {
        cpus = 32
    }
}

manifest {
    name = "CCBR/CHAMPAGNE"
    author = "CCR Collaborative Bioinformatics Resource"
    homePage = "https://github.com/CCBR/CHAMPAGNE"
    description = "CHromAtin iMmuno PrecipitAtion sequencinG aNalysis pipEline"
    mainScript = "main.nf"
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
