nextflow.enable.dsl = 2

params {
    input = null
    seq_center = null
    read_length = null
    genome = null

    // comma separated list of column names in the input samplesheet for contrasts
    // e.g. 'condition' or 'condition,timepoint' if these are columns in your samplesheet.
    contrasts = null

    // custom genome options
    genome_fasta = null
    genes_gtf   = null
    blacklist = null
    rename_contigs = null

    // Boilerplate options
    outdir = 'results'
    tracedir = "${params.outdir}/pipeline_info"
    publish_dir_mode = 'link'

    // Max resource options
    max_memory = '224 GB'
    max_cpus = 32
    max_time = '72 h'

    // CCBR shared resource paths
    index_dir = null
    fastq_screen {
        conf = null
        db_dir = null
    }

    // Pipeline options
    align_min_quality = 6                     // to get a min quality of 5, set this to 6
    deeptools {
        bin_size = 25
        smooth_length = 75
        normalize_using = "RPGC"
        excluded_chroms = "chrM chrX chrY"
    }

    multiqc {
        config = "${projectDir}/assets/multiqc_config.yaml"
        logo = "${projectDir}/assets/ccbr_logo.png"
    }

    min_fragment_length = 200 // https://github.com/CCBR/Pipeliner/blob/86c6ccaa3d58381a0ffd696bbf9c047e4f991f9e/Rules/InitialChIPseqQC.snakefile#L539

    gem {
        read_dists = "${projectDir}/assets/gem/Read_Distribution_default.txt" // source https://groups.csail.mit.edu/cgs/gem/download/Read_Distribution_default.txt
        fold = 3
        k_min = 6
        k_max = 13
    }

    macs {
        narrow {
            q = 0.01
        }
        broad {
            q = 0.01
            cutoff = 0.01
        }
    }
    sicer {
        species = "${params.genome}" // supported species https://github.com/zanglab/SICER2/blob/master/sicer/lib/GenomeData.py
    }
    homer {
        de_novo = true
        jaspar_db = "${projectDir}/assets/JASPAR2022_CORE_vertebrates_non-redundant_pfms_jaspar.txt" // source https://jaspar.genereg.net/download/data/2022/CORE/JASPAR2022_CORE_vertebrates_non-redundant_pfms_jaspar.txt
    }

    diffbind {
        report = "${projectDir}/assets/diffbind_report.Rmd"
    }

    run { // some steps can be turned on/off for debugging purposes
        qc = true
        deeptools = true
        normalize_input = true
        call_peaks = true
        gem = true
        sicer = true
        macs_broad = true
        macs_narrow = true
        normalize_peaks = false
        chipseeker = true
        homer = true
        meme = true
        consensus_union = true
        consensus_corces = true
    }
}

includeConfig 'conf/base.config'

profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    docker {
        docker.enabled = true
        // Avoid this error:
        //   WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
        // Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351
        // once this is established and works well, nextflow might implement this behavior as new default.
        docker.runOptions = '-u \$(id -u):\$(id -g)'
    }
    singularity {
        singularity.enabled = true
        singularity.autoMounts = true
        singularity.cacheDir = null // overridden by profiles: biowulf, frce, & slurmint
        envWhitelist='https_proxy,http_proxy,ftp_proxy,DISPLAY,SLURM_JOBID,SINGULARITY_BINDPATH'
    }
    biowulf {
        includeConfig "conf/biowulf.config"
    }
    slurm {
        includeConfig "conf/slurm.config"
    }
    interactive {
        includeConfig "conf/interactive.config"
    }
    test {
        includeConfig "conf/test.config"
    }
    test_mm10 {
        includeConfig "conf/test_mm10.config"
    }
    full_mm10 {
        includeConfig "conf/full_mm10.config"
    }
    test_human {
        includeConfig 'conf/test_human.config'
    }
}

includeConfig 'conf/genomes.config'
includeConfig 'conf/containers.config'

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.png"
}

includeConfig 'conf/modules.config'

String pipeline_version = new File("${projectDir}/VERSION").text

manifest {
    name = "CCBR/CHAMPAGNE"
    author = "CCR Collaborative Bioinformatics Resource"
    homePage = "https://github.com/CCBR/CHAMPAGNE"
    description = "CHromAtin iMmuno PrecipitAtion sequencinG aNalysis pipEline"
    mainScript = "main.nf"
    defaultBranch = "main"
    version = "${pipeline_version}"
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
